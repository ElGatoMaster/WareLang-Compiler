
import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import compilerTools.Directory;
import compilerTools.ErrorLSSL;
import compilerTools.Functions;
import compilerTools.Grammar;
import compilerTools.Production;
import compilerTools.TextColor;
import compilerTools.Token;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java_cup.production;
import javax.swing.JTextPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author rebek
 */
public class Compilador extends javax.swing.JFrame {

    private String titulo;
    private Directory directorio;
    private ArrayList<Token> tokens;
    private ArrayList<Production> ident;
    private ArrayList<ErrorLSSL> errores;
    private ArrayList<TextColor> textocolor;//Colores de palabras reservadas
    private Timer timerKeyReleased; //pintar

    private boolean estadoCompilacion = false;
    private tablaSimbolosIdent tabla;
    private tablaMetodosUs tabla2;
    private tablaListas tablaL;
    private tablaTokens tablaT;


    private ArrayList<String[]> simbolos;
    private ArrayList<String[]> metodos;
    private ArrayList<String[]> idList;
    private ArrayList<String[]> lisTokens;


    /**
     * Creates new form Compilador
     */
    public Compilador() {
        initComponents();
        init();
        for (int i = 0; i < 80 * 300; i++) // Default Height of cmd is 300 and Default width is 80
        {
            System.out.println("\b"); // Prints a backspace
        }
    }

    private void init() {
        titulo = "WareLangCompiler";
        setLocationRelativeTo(null);
        tabla = new tablaSimbolosIdent(this, true);
        tabla2 = new tablaMetodosUs(this,true);
        tablaL = new tablaListas(this,true);
        tablaT = new tablaTokens(this,true);

        
        setTitle(titulo);
        directorio = new Directory(this, areaCodigo, titulo, ".ware");
        addWindowListener(new WindowAdapter() {// Método para preguntar al cerrar, si no se ha guardado
            @Override
            public void windowClosing(WindowEvent e) {
                directorio.Exit();
                System.exit(0);
            }
        });
        Functions.setLineNumberOnJTextComponent(areaCodigo); //Funcion para numero de linea
        timerKeyReleased = new Timer((int) (100 * 0.3), (ActionEvent e) -> {
            timerKeyReleased.stop();

            int posicion = areaCodigo.getCaretPosition();
            areaCodigo.setText(areaCodigo.getText().replaceAll("[\r]+", ""));
            areaCodigo.setCaretPosition(posicion);

            cambioColor();
        });
        Functions.insertAsteriskInName(this, areaCodigo, () -> {
            timerKeyReleased.restart();
        }); //Al momento de hacer una edición se pone un asteriso en el titulo
        // y se llama al metodo timerKeyReleased

        //INICIALIZACIÓN
        tokens = new ArrayList<>();
        lisTokens = new ArrayList<>();
        simbolos = new ArrayList<>();
        metodos = new ArrayList<>();
        idList = new ArrayList<>();

        errores = new ArrayList();
        textocolor = new ArrayList<>();
        

        estadoCompilacion = true;
        //tablaSimbolos.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonsFilePanel = new javax.swing.JPanel();
        btnAbrir = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnGuardarC = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaCodigo = new javax.swing.JTextPane();
        panelButtonCompilerExecute = new javax.swing.JPanel();
        btnCompilar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        consola = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/62917openfilefolder_109270.png"))); // NOI18N
        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Create_New-80_icon-icons.com_57345.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Save_37110.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnGuardarC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/diskette_save_saveas_1514.png"))); // NOI18N
        btnGuardarC.setText("Guardar como");
        btnGuardarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsFilePanelLayout = new javax.swing.GroupLayout(buttonsFilePanel);
        buttonsFilePanel.setLayout(buttonsFilePanelLayout);
        buttonsFilePanelLayout.setHorizontalGroup(
            buttonsFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAbrir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardarC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        buttonsFilePanelLayout.setVerticalGroup(
            buttonsFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonsFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAbrir)
                    .addComponent(btnNuevo)
                    .addComponent(btnGuardar)
                    .addComponent(btnGuardarC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        areaCodigo.setBackground(new java.awt.Color(204, 204, 204));
        areaCodigo.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        areaCodigo.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(areaCodigo);

        btnCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/1486485588-add-create-new-math-sign-cross-plus_81186.png"))); // NOI18N
        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });

        jButton1.setText("Tabla de Tokens");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelButtonCompilerExecuteLayout = new javax.swing.GroupLayout(panelButtonCompilerExecute);
        panelButtonCompilerExecute.setLayout(panelButtonCompilerExecuteLayout);
        panelButtonCompilerExecuteLayout.setHorizontalGroup(
            panelButtonCompilerExecuteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelButtonCompilerExecuteLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCompilar)
                .addGap(53, 53, 53)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );
        panelButtonCompilerExecuteLayout.setVerticalGroup(
            panelButtonCompilerExecuteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonCompilerExecuteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelButtonCompilerExecuteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCompilar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        consola.setBackground(new java.awt.Color(204, 204, 204));
        consola.setForeground(new java.awt.Color(51, 51, 51));
        jScrollPane2.setViewportView(consola);

        jMenu1.setText("Tabla de Simbolos");

        jMenuItem1.setText("Identificador");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Listas");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem2.setText("Métodos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonsFilePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 230, Short.MAX_VALUE)
                        .addComponent(panelButtonCompilerExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1037, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buttonsFilePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelButtonCompilerExecute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        if (directorio.Open()) {
            cambioColor();
            limpiarAreaCodigo();
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        directorio.New();
        limpiarAreaCodigo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (directorio.Save()) {
            limpiarAreaCodigo();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCActionPerformed
        if (directorio.SaveAs()) {
            limpiarAreaCodigo();
        }
    }//GEN-LAST:event_btnGuardarCActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        if (getTitle().contains("*") || getTitle().equals(titulo)) { //Si no se ha guardadp se llama a SAVE()
            if (directorio.Save()) {
                compile();
            }
        } else {
            compile();
        }
    }//GEN-LAST:event_btnCompilarActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        tabla.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        tabla2.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       tablaT.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        tablaL.setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void compile() {
        limpiarAreaCodigo();
        analisisLexico();
        analisisSintactico();
        TablaTokens();
        tablasSimbolos();
        imprimirConsola();

        estadoCompilacion = true;
        jButton1.setEnabled(estadoCompilacion);
    }

    public void tablasSimbolos() {
        tablaT.setSimbolos(lisTokens);
        tablaT.llenarTabla();
        tabla.setSimbolos(simbolos);
        tabla.llenarTabla();
        tabla2.setSimbolos(metodos);
        tabla2.llenarTabla();
        tablaL.setSimbolos(idList);
        tablaL.llenarTabla();
    }

    private void analisisLexico() {
        // Extraer tokens
        Lexema lexema;
        try {
            File codigo = new File("code.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = areaCodigo.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF8"));
            lexema = new Lexema(entrada);
            while (true) {
                Token token = lexema.yylex();
                if (token == null) {
                    break;
                }
              if (token.getLexicalComp().equals("Identificador")) {
                    boolean repetido = false;
                    // Verificar si el lexema del token está repetido en los símbolos
                    for (String[] simbolo : simbolos) {
                        if (simbolo[0].equals(token.getLexeme())) {
                            simbolo[4] += token.getLine() + ",";
                            simbolos.set(simbolos.indexOf(simbolo), simbolo);
                            repetido = true;
                            break;
                        }
                     }
                    // Si no está repetido, agregar el token a los símbolos
                    if (!repetido) {
                        //identificador,tipodeDato,lineaDeclaracion,lineas referenciadas
                        simbolos.add(new String[]{token.getLexeme(), null,null, token.getLine()+"", ""});
                     }
                 }

                if (token.getLexicalComp().equals("Palabra_Reservada_Met")) {
                    metodos.add(new String[]{token.getLexeme(), "", "", String.valueOf(token.getLine())});
                }
                tokens.add(token);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
    }

    private void analisisSintactico() {
        Grammar gramatica = new Grammar(tokens, errores);
        ArrayList<Production> identValor = new ArrayList<>();
        ArrayList<Production> idSValor = new ArrayList<>();
        ArrayList<Production> mets = new ArrayList<>();
        ArrayList<Production> vectores = new ArrayList<>();

        //Eliminacin de errores Lexicos
        gramatica.delete("ERROR", 1, "Error léxico ({}): En la línea #, Cadena inválida");

        gramatica.delete("ERROR_1", 2, "Error Léxico ({}): En la línea #, Cadena no reconocida");

        gramatica.delete("ERROR_2", 3, "Error Léxico ({}): En la línea #, El número no es válido, quitar el 0 al inicio");

        gramatica.delete("ERROR_3", 4, "Error Léxico ({}): En la línea #, Identificador no cumple con la estructura, inicia con mayuscula o numero");

        gramatica.delete("ERROR_4", 5, "Error Léxico ({}): En la línea #, Faltó cerrar cadena con apóstrofe");

        gramatica.delete("ERROR_5", 6, "Error Léxico ({}): En la línea #, Numero decimal no válido, puntos demás o faltó decimal");

        gramatica.delete("ERROR_6", 7, "Error Léxico ({}): En la línea #, Operador incompleto");

        gramatica.delete("ERROR_7",9, "Error Léxico ({}): En la línea #, Cadena no reconocida");
        
        //production - ArrayList de Producciones donde deseamos guardar las agrupaciones realizadas
        /// AGRUPACIONES
        gramatica.group("Numero", "(Numero_Entero | Numero_Decimal | Numero_Mini)");
        gramatica.group("Valor", "(Hexadecimal | Verdadero | Falso  | Cadena)");
        gramatica.group("TipoDato", "(FREC | ENT | COLOR | DEC | BOOL | CAD | MINI)");
        gramatica.group("Op_Adisi", "(Op_Sum | Op_Res)");
        gramatica.group("Op_Multi", "(Op_Mul | Op_Div)");
        gramatica.group("Op_Asign", "(Op_MasIgual | Op_MenosIgual)");
        gramatica.group("OpRel", "(OpRel_Igual | OpRel_NoIgual | OpRel_Menor | OpRel_Mayor | OpRel_MenorIg | OpRel_MayorIg)");
        gramatica.group("OpLog", "(OpLog_Y | OpLog_O | OpLgo_NO)");
        //gramatica.group("OpImpr", "(CONSOL| LCD)");
        gramatica.group("MetodoSP", "F_SOLTAR | APAGAR | PRENDER | F_LIMPIAR | F_TOMAR | F_PARAR ");
        
      
           
        
        
        
            
        //******************** PARAMETROS  *******************
        gramatica.group("Parametros", "Par_abr TipoDato Identificador (Coma TipoDato Identificador)* Par_cer ");
        
         gramatica.group("Parametros", "Par_abr ((Coma) TipoDato)+ Par_cer ", true, 29,
                "Error sintáctico (29): En la línea #, Declaración de parámetros inconclusa.");
         
          gramatica.group("Parametros", "Par_abr (TipoDato (Coma))+ Par_cer ", true, 29,
                "Error sintáctico (29): En la línea #, Declaración de parámetros inconclusa.");
        
        gramatica.group("Parametros", "Par_abr ((Coma)+ TipoDato Identificador)+ Par_cer ", true, 29,
                "Error sintáctico (29): En la línea #, Declaración de parámetros inconclusa.");
        
        gramatica.group("Parametros", "Par_abr (TipoDato Identificador (Coma)+ )+ Par_cer ", true, 29,
                "Error sintáctico (29): En la línea #, Declaración de parámetros inconclusa.");
        
        gramatica.group("Parametros", "Par_abr (Coma)+ Par_cer ", true, 29,
                "Error sintáctico (29): En la línea #, Declaración de parámetros inconclusa.");
         gramatica.finalLineColumn();
        
        
        //******* VECTORES **********************
        
        
        gramatica.group("DeclaracionVect", "VECTOR TipoDato Identificador Corch_abr Numero Corch_cer ",vectores);
       
        gramatica.group("DeclaracionVect", "VECTOR TipoDato Identificador Op_asignacion Corch_abr"
                + " ((Valor | Numero) | (Valor | Numero) Coma)+ Corch_cer ",vectores); 
        
        
                
            //Errores
          gramatica.group("DeclaracionVect", " VECTOR TipoDato Identificador Op_asignacion  Corch_abr (Corch_abr)+"
                + " ((Valor | Numero) | (Valor | Numero) Coma)* (Corch_cer)+", 51,
                "Error sintáctico (51): En la línea #, Existen corchetes de más.");
        
         gramatica.group("DeclaracionVect", " VECTOR TipoDato Identificador Op_asignacion (Corch_abr)+ "
                + " ((Valor | Numero) | (Valor | Numero) Coma)* Corch_cer Corch_cer (Corch_cer)+", 51,
                "Error sintáctico (51): En la línea #, Existen corchetes de más.");  
         
         gramatica.group("DeclaracionVect", " VECTOR TipoDato Identificador (Op_Adisi|Op_Multi|OpRel|OpLog) (Corch_abr)+"
                + " ((Valor | Numero) | (Valor | Numero) Coma)* (Corch_cer)+", 52,
                "Error sintáctico (52): En la línea #, Operador invalido para la asignación.");
        
        
        gramatica.group("DeclaracionVect", "VECTOR TipoDato (Corch_abr)+ Corch_cer ", 12,
                "Error sintáctico (15): En la línea #, Falta un identificador en la declaración.");
        
        gramatica.group("DeclaracionVect", " VECTOR TipoDato  Op_asignacion (Corch_abr)+"
                + " ((Valor | Numero) | (Valor | Numero) Coma)+ (Corch_cer)+ ",15,
                "Error sintáctico (16): En la línea #, Falta palabra clave para poder declarar.");
        
        gramatica.group("DeclaracionVect", "TipoDato (Corch_abr)+ (Corch_cer)+ ", 15,
                "Error sintáctico (16): En la línea #, Falta palabra clave para poder declarar.");

        gramatica.group("DeclaracionVect", "TipoDato Identificador Op_asignacion Corch_abr"
                + " ((Valor | Numero) | (Valor | Numero) Coma)+ (Corch_cer)+ ", 15,
                "Error sintáctico (16): En la línea #, Falta palabra clave para poder declarar.");

        gramatica.group("DeclaracionVect", "VECTOR TipoDato Identificador Op_asignacion (Corch_abr)+"
                + " (Coma)+ Corch_cer ", 16,
                "Error sintáctico (26): En la línea #, Faltan por asignar valores en la lista");

        gramatica.group("DeclaracionVect", "VECTOR TipoDato Identificador Op_asignacion (Corch_abr)+"
                + " ((Valor | Numero) Coma)+ (Corch_cer)+", 16,
                "Error sintáctico (26): En la línea #, Faltan por asignar valores en la lista");
        gramatica.finalLineColumn();

        /***************** DECALARACION MATRIZ ******************** tratemos de no usar matrices
        gramatica.group("DeclaracionMatriz", "MATRIZ TipoDato Identificador Corch_abr Corch_cer Corch_abr Corch_cer", true);
        */
        
        

        //******************* DECLARACION DE VARIABLES ASIGNADA *********************
        gramatica.group("DeclaracionAsignada", "CONF TipoDato Identificador Op_asignacion (Valor|Numero)", identValor);
        
        gramatica.group("DeclaracionAsignada", "TipoDato Identificador (Op_Adisi|Op_Multi|OpRel|OpLog) (Valor|Numero)", 52,
                "Error sintáctico (52): En la línea #, Operador invalido para la asignación.");

        gramatica.group("DeclaracionAsignada", "TipoDato Identificador Op_asignacion (Valor|Numero)", 15,
                "Error sintáctico (16): En la línea #, Falta palabra clave para poder declarar.");

        gramatica.group("DeclaracionAsignada", "CONF Identificador Op_asignacion (Valor|Numero)", 14,
                "Error sintáctico (14): En la línea #, No está definido el tipo de dato en la declaración.");

        gramatica.group("DeclaracionAsignada", "CONF Op_asignacion (Valor|Numero)", 12,
                "Error sintáctico (15): En la línea #, Falta un identificador en la declaración.");
        
        gramatica.group("DeclaracionAsignada", "CONF TipoDato Op_asignacion (Valor|Numero)", 12,
                "Error sintáctico (15): En la línea #, Falta un identificador en la declaración.");

        gramatica.group("DeclaracionAsignada", "CONF TipoDato Identificador Op_asignacion ", 13,
                "Error sintáctico (23): En la línea #, Falta valor a asignar a la variable");

        gramatica.group("DeclaracionAsignada", "CONF TipoDato Identificador  (Valor|Numero)", 17,
                "Error sintáctico (25): En la línea #, Falta símbolo de asignación");
        gramatica.finalLineColumn();

       
        
        // ******** DECLARACION SIMPLE ********
        gramatica.group("DeclaracionVariable", "CONF TipoDato Identificador", idSValor );

        // Errores
        gramatica.group("DeclaracionVariable", "TipoDato Identificador", 15,
                "Error sintáctico (16): En la línea #, Falta palabra clave CONF para poder declarar.");

        gramatica.group("DeclaracionVariable", "CONF Identificador", 14,
                "Error sintáctico (14): En la línea #, No está definido el tipo de dato en la declaración.");

        gramatica.group("DeclaracionVariable", "CONF TipoDato ", 12,
                "Error sintáctico (15): En la línea #, Falta un identificador en la declaración.");

        gramatica.group("DeclaracionVariable", "Identificador Punto_coma", 14,
                "Error sintáctico (14): En la línea #, No está definido el tipo de dato en la declaración.");

        gramatica.finalLineColumn();

        
        
        
        //********************* DECLARACIONES ********************
        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.group("Declaracion", "(DeclaracionVariable Punto_coma  | DeclaracionAsignada  Punto_coma | DeclaracionVect Punto_coma | DeclaracionMatriz Punto_coma )");
            gramatica.group("Declaracion", "(DeclaracionVariable | DeclaracionAsignada | DeclaracionVect | DeclaracionMatriz)", 11,
                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
            gramatica.group("Declaraciones", "(Declaracion | Declaracion Declaraciones)*");
            gramatica.finalLineColumn();
        });
        
        
        
        //*********************** parametros **************************
//        gramatica.group("ParmetrosLlamada", "((Identificador|Valor|Numero) (Coma (Identificador|Valor|Numero))*)");        
        //ERRORES
        gramatica.group("ParmetrosLlamada", "Par_abr  (Coma)+ Par_cer",29,
                "Error sintáctico (29): En la línea #, Faltan parámetros por declarar.");
        gramatica.group("ParmetrosLlamada", "Par_abr  ((Coma (Identificador|Valor|Numero))+ Par_cer",true,29,
                "Error sintáctico (29): En la línea #, Declaración de parámetros inconclusa.");
        
        
        
        //////// !!!!!!!!!!!!!!!! FALTANNNNNNNNNNNNNNNNN
          
        
        gramatica.group("MetodoEstatique", "MetodoSP Par_abr Par_cer Punto_coma"); 
        
        gramatica.group("MetodoEstatique", "MetodoSP Punto_coma",57,
                "Error sintáctico (49): En la línea #, Faltan parentésis depúes de la palabra reservada.");
        
        gramatica.group("MetodoEstatique", "MetodoSP",57,
                "Error sintáctico (49): En la línea #, Faltan parentésis depúes de la palabra reservada.");
        
        
        gramatica.group("MetodoEstatique", "MetodoSP Par_abr (Valor | Numero| Identificador| ERROR_7)Par_cer Punto_coma",50,
                "Error sintáctico (50): En la línea #, Sintaxis de método incorrecta.");
        
        gramatica.group("MetodoEstatique", "MetodoSP (Par_abr)+ Par_cer (Par_cer)+ Punto_coma",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más.");
        
        gramatica.group("MetodoEstatique", "MetodoSP (Par_abr)+ Par_abr (Par_cer)+ Punto_coma",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más.");
        
        gramatica.group("MetodoEstatique", "MetodoSP Par_abr Punto_coma",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        gramatica.group("MetodoEstatique", "MetodoSP  Par_cer Punto_coma",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        //gramatica.group("MetodoEstatique", "Identificador Par_abr Par_cer Punto_coma");
        
//        gramatica.group("MetodoEstatique", "Identificador (Par_abr)+ Par_cer (Par_cer)+ Punto_coma",49,
//                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
//        
//        gramatica.group("MetodoEstatique", "Identificador ((Par_abr)+ Par_abr (Par_cer)+ Punto_coma",49,
//                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
//        
//        gramatica.group("MetodoEstatique", "Identificador Par_abr Par_cer",11,
//                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
        
        gramatica.group("MetodoEstatique", "Identificador Par_abr ((Identificador|Valor|Numero) (Coma (Identificador|Valor|Numero))*) Par_cer Punto_coma"); 
        
        gramatica.group("MetodoEstatique", "Identificador Par_abr ((Identificador|Valor|Numero) (Coma (Identificador|Valor|Numero))*) Par_cer ",11,
                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
        
        gramatica.group("MetodoEstatique", "Identificador Par_abr ((Identificador|Valor|Numero) ((Coma)+ (Identificador|Valor|Numero))*) Par_cer ",54,
                    "Error sintáctico (54): En la línea #, Faltan valores en los parámetros");
        
        gramatica.group("MetodoEstatique", "Identificador Par_abr (Coma)+  Par_cer ",54,
                    "Error sintáctico (54): En la línea #, Faltan valores en los parámetros");
        
        gramatica.group("MetodoEstatique", "MetodoSP Par_abr Par_cer ",11,
                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
        
        gramatica.group("DeclaracionMetodo", "DEF (Identificador|Expresion) Parametros",mets);
        gramatica.group("DeclaracionMetodo", "DEF (Identificador|Expresion) Par_abr Par_cer",mets);
                         
//        gramatica.group("DeclaracionMetodo", "Identificador Parametros ",44,
//                "Error sintáctico (44): En la línea #, Falta palabra clave para definir método.");
        
        gramatica.group("DeclaracionMetodo", "Identificador Par_abr Par_cer",44,
                "Error sintáctico (44): En la línea #, Falta palabra clave para definir método.");
        
        gramatica.group("DeclaracionMetodo", "DEF  Parametros",45,
                "Error sintáctico (45): En la línea #, Falta nombre del método.");
        
        gramatica.group("DeclaracionMetodo", "DEF  Par_abr Par_cer",45,
                "Error sintáctico (45): En la línea #, Falta nombre del método.");
        
        
        gramatica.group("ERRORES", "Par_abr Par_cer Punto_coma",49,
                "Error sintáctico (49): En la línea #, Falta palabra reservada."); 
            
         gramatica.group("ERRORES", "(ERROR_1 | ERROR_7) Par_abr Par_cer Punto_coma",49,
                "Error sintáctico (49): En la línea #, Falta palabra reservada"); 
        
         
         /******************************   lista SACAR  ***********************
        gramatica.group("metListaSacar", "Identificador Punto F_Sacar Par_abr (Numero | Identificador)? Par_cer");
        
        gramatica.group("metListaSacar", "Identificador Punto F_Sacar (Par_abr)+ (Numero | Identificador)? Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("metListaSacar", "Identificador Punto F_Sacar (Par_abr)+ Par_abr (Numero | Identificador)? (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("metListaSacar", "F_Sacar",19,
                "Error sintáctico (19): En la línea #, Estructura inválidadel método.");
        
        gramatica.group("metListaSacar", "Identificador Punto  Par_abr (Numero | Identificador)? Par_cer",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
               
        gramatica.group("metListaSacar", "Identificador Punto F_Sacar Par_abr (Numero | Identificador)?",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("metListaSacar", "Identificador Punto F_Sacar  (Numero | Identificador)? Par_cer",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        gramatica.finalLineColumn(); */
        
         
        /******************************   lista agreggar  ***********************
        gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR Par_abr (Numero | Identificador | Valor) Par_cer ");
        
         gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR  (Par_abr)+ (Numero | Identificador)? Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR  (Par_abr)+ Par_abr (Numero | Identificador)? (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR Par_abr Par_cer ",20,
                "Error sintáctico (23): En la línea #, Falta un valor en método.");
   
        gramatica.group("metListaAgre", "Identificador Punto ",28,
                "Error sintáctico (28): En la línea #, Falta palabra clave.");  
        
        gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR Par_abr (Numero | Identificador | Valor) ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR  (Numero | Identificador | Valor) Par_cer ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("metListaAgre", "Identificador Punto F_AGREGAR",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("metListaAgre", "Identificador Punto Par_abr (Numero | Identificador | Valor) Par_cer  ",28,
                "Error sintáctico (28): En la línea #, Falta palabra clave.");
           
        gramatica.finalLineColumn();*/
        
        
                
               
        
        //******************* EST CAJA **********************
      
        
        gramatica.group("EstCaja", "F_CAJA Par_abr (Identificador | Numero) Par_cer");
        // ERRORES CAJa
        
         gramatica.group("EstCaja", "F_CAJA ", 11,
                "Error sintáctico (11): En la línea #, Falta abrir o cerrar paréntesis ().");
                
        gramatica.group("EstCaja", "F_CAJA Par_abr  Par_cer", 16,
                "Error sintáctico (16): En la línea #, Estructura inválida del método falta un valor.");
        
        gramatica.group("EstCaja", "F_CAJA  (Par_abr)+ (Identificador | Numero) Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("EstCaja", "F_CAJA  (Par_abr)+ Par_abr (Identificador | Numero) (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        
        
        gramatica.group("EstCaja", "F_CAJA (Identificador | Numero) Par_cer", 11,
                "Error sintáctico (11): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("EstCaja", "F_CAJA Par_abr (Identificador | Numero) ", 11,
                "Error sintáctico (11): En la línea #, Falta abrir o cerrar paréntesis ().");
        
            gramatica.finalLineColumn();
            
        
        
        //******************* EST ALARMA**********************
        gramatica.group("EstAlarma", "F_ALARMA Par_abr (Identificador | Numero) Par_cer");
        // ERRORES ALARMA
        gramatica.group("EstAlarma", "F_ALARMA", 19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        gramatica.group("EstAlarma", "F_ALARMA Par_abr Par_cer", 20,
                "Error sintáctico (23): En la línea #, Falta un valor en método.");
        
        gramatica.group("EstAlarma", "F_ALARMA  (Par_abr)+ (Identificador | Numero) Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("EstAlarma", "F_ALARMA (Par_abr)+ Par_abr (Identificador | Numero) (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
       
       
        gramatica.group("EstAlarma", "F_ALARMA (Identificador | Numero) Par_cer", 18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
                
         gramatica.group("EstAlarma", "F_ALARMA Par_abr (Identificador | Numero)", 18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("EstAlarma", "F_ALARMA Par_abr (Identificador | Numero)  ", 18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        
        gramatica.finalLineColumn();
         
         
         
        /******************************METODOS IMPRM***********************
        gramatica.group("EstImpr", "F_IMPR Par_abr (Valor|metListaSacar) Coma OpImpr Par_cer");
        
            gramatica.group("EstImpr", "F_IMPR ",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        gramatica.group("EstRevisar", "F_IMPR Par_abr (Valor|metListaSacar) (Coma)+ OpImpr Par_cer",55,
                    "Error sintáctico (55): En la línea #, Sintaxis incorrecta comas de más");
        
        gramatica.group("EstImpr", "F_IMPR Par_abr Numero Coma OpImpr Par_cer",32,
                "Error sintáctico (32): En la línea #, No se permite un numero como mensaje a imprimir.");
        
        gramatica.group("EstImpr", "F_IMPR Par_abr Par_cer",20,
                "Error sintáctico (27): En la línea #, Falta valores en los parámetros.");

        gramatica.group("EstImpr", "F_IMPR  (Par_abr)+ (Valor|metListaSacar) Coma OpImpr Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("EstImpr", "F_IMPR (Par_abr)+ Par_abr (Valor|metListaSacar) Coma OpImpr (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 

        
        gramatica.group("EstImpr", "F_IMPR Par_abr Coma Par_cer",20,
                "Error sintáctico (27): En la línea #, Falta valores en los parámetros.");
        
        gramatica.group("EstImpr", "F_IMPR Par_abr Valor Coma Par_cer",30,
                "Error sintáctico (30): En la línea #, Falta donde se imprimirá el mensaje.");
        
        gramatica.group("EstImpr", "F_IMPR Par_abr Coma OpImpr Par_cer",31,
                "Error sintáctico (31): En la línea #, Falta mensaje a imprimir.");
        
        gramatica.group("EstImpr", "F_IMPR Par_abr Valor Coma OpImpr ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
         gramatica.group("EstImpr", "F_IMPR Valor Coma OpImpr Par_cer ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        
         gramatica.finalLineColumn(); */
         
         

        //******************************METODOS REVISAR***********************
        gramatica.group("EstRevisar", "F_REVISAR Par_abr (Valor|Identificador) Coma (Identificador | Numero) Par_cer");
        
        
        //ERRORESSS
                 
         gramatica.group("EstRevisar", "F_REVISAR ",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        gramatica.group("EstRevisar", "F_REVISAR Par_abr (Valor|Identificador) (Coma)+ (Identificador | Numero) Par_cer",55,
                    "Error sintáctico (55): En la línea #, Sintaxis incorrecta comas (,) de más");
        
        gramatica.group("EstRevisar", "F_REVISAR Par_abr (Valor|Identificador) Coma (Identificador | Numero)",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("EstRevisar", "F_REVISAR  (Valor|Identificador) Coma (Identificador | Numero) Par_cer",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("EstRevisar", "F_REVISAR Par_abr  Coma (Identificador | Numero) Par_cer",20,
                "Error sintáctico (25): En la línea #, Falta valor en el parámetro de color.");
        
        gramatica.group("EstRevisar", "F_REVISAR Par_abr (Valor|Identificador)  Coma  Par_cer",21,
                "Error sintáctico (26): En la línea #, Falta valor en el parámetro de puerto.");
        
         gramatica.group("EstRevisar", "F_REVISAR Par_abr   (Coma)+  Par_cer",20,
                "Error sintáctico (27): En la línea #, Falta valores en los parámetros.");
         
         gramatica.group("EstRevisar", "F_REVISAR Par_abr   Par_cer",20,
                "Error sintáctico (27): En la línea #, Falta valores en los parámetros.");
         
         gramatica.group("EstRevisar", "F_REVISAR   (Par_abr)+ (Valor|Identificador)? Coma (Identificador | Numero)? Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("EstRevisar", "F_REVISAR (Par_abr)+ Par_abr (Valor|Identificador)? Coma (Identificador | Numero)? (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más.");
         
         gramatica.group("EstRevisar", "Par_abr (Valor|Identificador) Coma (Identificador | Numero) Par_cer", 19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        gramatica.finalLineColumn();
        
    
    
        
        //******************************   MOVIMIENTO    ***********************
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr (Numero| Identificador) Coma (Numero | Identificador) Par_cer ");
        
       gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) ",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr (Numero| Identificador) (Coma)+ (Numero | Identificador) Par_cer ",55,
                    "Error sintáctico (55): En la línea #, Sintaxis incorrecta comas (,) de más");
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) (Par_abr)+ (Numero| Identificador)"
                + " Coma (Numero | Identificador) Par_cer Par_cer (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) Par_abr Par_abr (Par_abr)+ "
                + " (Numero| Identificador) Coma (Numero | Identificador) (Par_cer)+ ",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más.");
        
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr  Coma  Par_cer  ",20,
                "Error sintáctico (23): En la línea #, Falta un valor en método.");
         
         gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr  Par_cer ",43,
                "Error sintáctico (43): En la línea #, Faltan valores en el método");
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr (Numero| Identificador) Coma (Numero | Identificador) ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + " (Numero| Identificador) Coma (Numero | Identificador) Par_cer  ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr (Numero| Identificador) Coma Par_cer  ",20,
                "Error sintáctico (23): En la línea #, Falta un valor en método.");
        
        gramatica.group("F_MOV", "(F_ADELANTE | F_ATRAS | F_DERECHA | F_IZQUIERDA) "
                + "Par_abr  Coma (Numero | Identificador) Par_cer  ",20,
                "Error sintáctico (23): En la línea #, Falta un valor en método.");
        
       
          
          
        gramatica.finalLineColumn();
        
        
        
        
        /******************************   lista cantidad   ***********************
        gramatica.group("metListaRet", "Identificador Punto F_CANTIDAD Par_abr Par_cer ");
        
        gramatica.group("metListaRet", "Identificador Punto F_CANTIDAD Par_cer ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
         gramatica.group("metListaRet", "Identificador Punto F_CANTIDAD (Par_abr)+ (Par_cer)+",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("metListaRet", "Identificador Punto F_CANTIDAD Par_abr",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("metListaRet", "Identificador Punto F_CANTIDAD",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ().");
        
        gramatica.group("metListaRet", "Identificador Punto Par_abr Par_cer ",28,
                "Error sintáctico (28): En la línea #, Falta palabra clave.");
        
        gramatica.group("metListaRet", "Identificador  F_CANTIDAD Par_abr Par_cer ",19,
                "Error sintáctico (19): En la línea #, Estructura inválida del método.");
        
        gramatica.group("metListaRet", "Identificador Punto ",28,
                "Error sintáctico (28): En la línea #, Falta palabra clave.");      
        gramatica.finalLineColumn();*/
        
       
        
        

     
        
        
        
        
        //*********************** MÉTODOS ESTATICOS**************************
       
//        gramatica.group("MetodoEstatique", "(F_SOLTAR | F_APAGAR | F_PRENDER | F_LIMPIAR | F_TOMAR | F_PARAR )"
//                + " Par_abr ",18,
//                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ()."); 
//        
//        gramatica.group("MetodoEstatique", "(F_SOLTAR | F_APAGAR | F_PRENDER | F_LIMPIAR | F_TOMAR | F_PARAR )"
//                + "  Par_cer",18,
//                "Error sintáctico (18): En la línea #, Falta abrir o cerrar paréntesis ()."); 
//        
//        gramatica.group("MetodoEstatique", "(F_SOLTAR | F_APAGAR | F_PRENDER | F_LIMPIAR | F_TOMAR | F_PARAR)",19,
//                "Error sintáctico (19): En la línea #, Estructura inválida del método.");       
//        gramatica.finalLineColumn();
           

         //////// !!!!!!!!!!!!!!!! FALTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
         // ******************************** metodos ****************************  

     
        
        
        //****************** ESTRUCTUTA REPETIR*********
        gramatica.group("EstRepetir", "Est_REPETIR Par_abr (Numero | Identificador | metListaRet) Par_cer ");
        // ERRORES REPETIR
        gramatica.group("EstRepetir", "Est_REPETIR Par_abr  Par_cer ",19,
                "Error sintáctico (23): En la línea #, Falta un valor."); 
        
        gramatica.group("EstRepetir", "Est_REPETIR F_CANTIDAD Par_abr (Par_abr)+ (Numero | Identificador | metListaRet) Par_cer (Par_cer)+",49,
                "Error sintáctico (49): En la línea #, Existen paréntesis de más."); 
        
        gramatica.group("EstRepetir", "Est_REPETIR ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
        
        gramatica.group("EstRepetir", "Est_REPETIR (Numero | Identificador) Par_cer ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
        
        gramatica.group("EstRepetir", "Est_REPETIR Par_abr (Numero | Identificador) ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
        
        gramatica.group("EstRepetir", "Par_abr (Numero | Identificador) Par_cer ",15,
                "Error sintáctico (16): En la línea #, Falta palabra clave.");
        gramatica.finalLineColumn();
        
       
         gramatica.group("LlamadaCond", "(EstRevisar | F_MOV | "
                    + " EstAlarma | EstCaja)");
  
        
         
                      //   ASIGNACIOON SI IGUAL
       gramatica.group("Asignacion", "(Identificador) Op_asignacion (Expresion|Identificador|Numero|Valor) Punto_coma");         
       gramatica.group("Asignacion", "(Expresion|Identificador) Op_Asign (Expresion|Identificador|Numero) Punto_coma");
         
         
        
//        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
//            gramatica.group("Factor", "Numero | Identificador");
//            gramatica.group("FactorOp", "(Factor Op_Adisi | Factor Op_Multi)+");
//            gramatica.group("FactorOp", "(Factor)+");
//            gramatica.group("ExpArit", "(FactorOp | FactorOp ExpArit )+");
//        });
//
//            gramatica.group("ExpAritF", "(ExpArit)+");
            
           
       
            
                
         //////// !!!!!!!!!!!!!!!! FALTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
        //****************** EXPRESIONES REL Y LOGICAS *********
        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.group("ExpresionDos","LlamadaCond");
            gramatica.group("Expresion", "Par_abr ExpAritF Par_cer |ExpAritF | Valor | Numero | Identificador");
            gramatica.group("ExpRel", "(Expresion |ExpresionDos) OpRel (Expresion |ExpresionDos)");
            gramatica.group("ExpRel", "(Expresion |ExpresionDos) (Op_Adisi |Op_Adisi|Op_Asign|Op_asignacion)"
                    + "(Expresion |ExpresionDos)",56,
                    "Error sintáctico (56): En la línea #, Operador invalido para esta operación");
            gramatica.group("ExpLog", "ExpRel | ExpLog OpLog ExpLog |  ExpLog ");
         });
        
        
         gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.group("LlamadaEstatica", "ExpresionDos Punto_coma");
            
            gramatica.group("LlamadaEstatica", "ExpresionDos ",11,
                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
            
            
            gramatica.group("MetodosEstaticos", "(LlamadaEstatica | LlamadaEstatica  MetodosEstaticos)+");
        });
        
       

        

       
       //Errores
       gramatica.group("Asignacion", "(Expresion|Identificador) Op_asignacion (Expresion|Identificador|Numero|Valor)",11,
                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
        
       gramatica.group("Asignacion", "(Expresion|Identificador) Op_Asign (Expresion|Identificador|Numero)",11,
                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
       
        gramatica.group("Asignacion", "(Expresion|Identificador) Op_asignacion Punto_coma",41,
                    "Error sintáctico (41): En la línea #, Asignación incompleta falta un valor");
 
        
       gramatica.group("Asignacion", "(Expresion|Identificador) Op_Asign Punto_coma ",41,
                    "Error sintáctico (41): En la línea #, Asignación incompleta falta un valor");
       
       gramatica.finalLineColumn();
            

        
         //////// !!!!!!!!!!!!!!!! FALTANNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
        //****************** ESTRUCTURA SIII *********
        gramatica.group("EstSi", "Est_SI Par_abr ExpLog Par_cer");
        
        gramatica.group("EstSi", "Est_SI  (Par_abr)+  ExpLog  Par_cer (Par_cer)+(Par_cer Par_cer Par_cer Par_cer)?",48,
                "Error sintáctico (48): En la línea #, Existen paréntesis de más.");
        
        gramatica.group("EstSi", "Est_SI  Par_abr (Par_abr)+ ExpLog (Par_cer)+",48,
                "Error sintáctico (48): En la línea #,Existen paréntesis de más.");   
        
        
        gramatica.group("EstSi", "Est_SI Par_abr ExpLog ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
        
        gramatica.group("EstSi", "Est_SI ExpLog Par_cer ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
                              
        gramatica.group("EstSi", "Est_SI Par_abr  ar_cer",39,
                "Advertencia (39): En la línea #, No existe condición a evaluar.");
        gramatica.finalLineColumn();
        
        
        gramatica.group("EstSiNO", "Est_SINO");
        


        //****************** ESTRUCTUTA MIENTRAS *********
        gramatica.group("EstMientras", "Est_MIENTRAS Par_abr ExpLog Par_cer");
        
        gramatica.group("EstSi", "Est_MIENTRAS (Par_abr)+ Par_abr ExpLog Par_cer (Par_cer)+",48,
                "Error sintáctico (18): En la línea #, Existen parentesis de más().");
        
        gramatica.group("EstMientras", "Est_MIENTRAS Par_abr ExpLog ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
        
        gramatica.group("EstMientras", "Est_MIENTRAS ExpLog Par_cer ",18,
                "Error sintáctico (18): En la línea #, Falta abrir o cerrar parentesis ().");
                              
        gramatica.group("EstMientras", "Est_MIENTRAS Par_abr  Par_cer",39,
                "Advertencia (39): En la línea #, No existe condición a evaluar.");

        
//       gramatica.group("MetodoagregarPuntocoma", "metListaAgre Punto_coma");
//       gramatica.group("MetodoagregarPuntocoma", "metListaAgre ",11,
//                    "Error sintáctico (9): En la línea #, Falta punto y coma al final de la linea");
       
        
        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
                        
            gramatica.group("Sentencia", " (Asignacion | EstControl "
                    + "| ExpresionDos| MetodosEstaticos | MetodoEstatique|ERRORES| ERRORES1)+");
            gramatica.group("DeclaracionesF", "(Declaraciones)+");
            gramatica.group("Sentencias", "(Sentencia | Sentencia Sentencias)+");
            gramatica.group("EstControl", "(EstMientras |  EstRepetir | EstSi | EstSiNO) Llav_abr (Sentencias|DeclaracionesF)* Llav_cer");
            
        });
        
        //errores llaves control
            gramatica.finalLineColumn(); 
            gramatica.group("EstControl", "(EstMientras |  EstRepetir | EstSi | EstSiNO) Llav_abr (Sentencias|DeclaracionesF)*",
                34, "Error sintáctico (34): En la línea #, Falta abrir o cerrar }{ llaves.");
            gramatica.initialLineColumn();
            gramatica.group("EstControl", "(EstMientras |  EstRepetir | EstSi | EstSiNO) (Sentencias|DeclaracionesF)* Llav_cer",
                34, "Error sintáctico (34): En la línea #, Falta abrir o cerrar }{ llaves.");
        
        //si es coomo dices mirA
       
       gramatica.loopForFunExecUntilChangeNotDetected(() -> {
        //gramatica.group("EstPrincipal", "PRINCIPAL Llav_abr (Sentencias|DeclaracionesF)* Llav_cer");
        
         gramatica.group("DeclaracionMetodoSentencias", "DeclaracionMetodo Llav_abr (Sentencias | DeclaracionesF)* Llav_cer");
        
        //gramatica.group("EstPrincipal", " Llav_abr (Sentencias|DeclaracionesF)* Llav_cer",
                //36, "Error sintáctico (36): En la línea #, Falta palabra clave PRINCIPAL.");
        
        //errores llaves metodos
        gramatica.finalLineColumn(); 
        gramatica.group("DeclaracionMetodoSentencias", "DeclaracionMetodo Llav_abr (Sentencias|DeclaracionesF)* ",
                34, "Error sintáctico (34): En la línea #, Falta abrir o cerrar }{ llaves.");
         gramatica.initialLineColumn();
        gramatica.group("DeclaracionMetodoSentencias", "DeclaracionMetodo  (Sentencias)* Llav_cer ",
                34, "Error sintáctico (34): En la línea #, Falta abrir o cerrar }{ llaves.");
        
//        gramatica.group("EstPrincipal", "PRINCIPAL Llav_abr (DeclaracionMetodoSentencias)* Llav_cer",
//                40, "Error sintáctico (40): En la línea #, No se pueden declarar metodos dentro de PRINCIPAL.");
        
        gramatica.group("CuerpoClase", "(DeclaracionMetodoSentencias | Sentencias | DeclaracionesF)+");
        gramatica.group("CuerpoClases", "(CuerpoClase| CuerpoClase CuerpoClases)");
        });
        
        
        
        ////********************** CLASEEE ***********************
        gramatica.group("EstClase", "CLASE (Expresion|Identificador) Llav_abr (CuerpoClases|DeclaracionesF)* Llav_cer");
        
        gramatica.initialLineColumn();
        
        gramatica.group("EstClase", "CLASE Llav_abr (CuerpoClases|DeclaracionesF)* Llav_cer",
                35, "Error sintáctico (35): En la línea #, Falta nombrar a la clase.");
        
        gramatica.group("EstClase", "CLASE Expresion (CuerpoClases|DeclaracionesF)* Llav_cer",
                34, "Error sintáctico (34): En la línea #, Falta abrir o cerrar }{ llaves.");  
        
        gramatica.group("EstClase", "Expresion Llav_abr (CuerpoClases|DeclaracionesF)* Llav_cer",
                36, "Error sintáctico (36): En la línea #, Falta palabra clave CLASE.");
              

         gramatica.finalLineColumn(); 
                 gramatica.group("EstClase", "CLASE (Expresion|Identificador) Llav_abr (CuerpoClases|DeclaracionesF)*",
                34, "Error sintáctico (34): En la línea #, Falta abrir o cerrar }{ llaves.");
        
      


        valoresIdent(identValor,idSValor);
        defineMetodos(mets);
        meterListass(vectores);

        gramatica.show();
    }
    
    
    
    private void valoresIdent(ArrayList<Production> aaa, ArrayList<Production> bbb){
        for (Production ident : aaa) {
            String tipo_dato = ident.lexemeRank(1);
            String identificador = ident.lexemeRank(-3);
            String valor = ident.lexemeRank(-1);
            for(var sim: simbolos){
                if(sim[0].equals(identificador)){
                    sim[1] = tipo_dato;
                    sim[2] = valor;
                    simbolos.set(simbolos.indexOf(sim), sim);
                    break;
                }
            }
        }
        for(Production id : bbb){
            String tipoDato = id.lexemeRank(1);
            String nombre = id.lexemeRank(2);
            for(var sim: simbolos){
                if(sim[0].equals(nombre)){
                    sim[1] = tipoDato;
                    simbolos.set(simbolos.indexOf(sim), sim);
                    break;
                }
            }
        }
    }
    
    private void defineMetodos(ArrayList<Production> mets) {
    for (Production met : mets) {
        String nom = met.lexemeRank(1);
        StringBuilder pm = new StringBuilder();
        int i = 3;
        while (!met.lexemeRank(i).equals(")")) {
            pm.append(met.lexemeRank(i)).append(" ");
            i++;
        }

        String[] parametros = pm.toString().trim().split(",");

        // Clasificación de parámetros por prefijo
        List<String> boolParams = new ArrayList<>();
        List<String> miniParams = new ArrayList<>();
        List<String> entParams = new ArrayList<>();
        List<String> decParams = new ArrayList<>();
        List<String> cadParams = new ArrayList<>();
        List<String> frecParams = new ArrayList<>();
        List<String> colorParams = new ArrayList<>();

        for (String param : parametros) {
            param = param.trim();
            if (param.startsWith("BOOL")) {
                boolParams.add(param);
            } else if (param.startsWith("MINI")) {
                miniParams.add(param);
            } else if (param.startsWith("ENT")) {
                entParams.add(param);
            } else if (param.startsWith("DEC")) {
                decParams.add(param);
            } else if (param.startsWith("CAD")) {
                cadParams.add(param);
            } else if (param.startsWith("FREC")) {
                frecParams.add(param);
            } else if (param.startsWith("COLOR")) {
                colorParams.add(param);
            }
            for(var s: simbolos){
                if(param.endsWith(s[0])){
                    simbolos.remove(simbolos.indexOf(s));
                    break;
                }
            }
        }

        // Combina los parámetros ordenados
        List<String> sortedParams = new ArrayList<>();
        sortedParams.addAll(boolParams);
        sortedParams.addAll(miniParams);
        sortedParams.addAll(entParams);
        sortedParams.addAll(decParams);
        sortedParams.addAll(cadParams);
        sortedParams.addAll(frecParams);
        sortedParams.addAll(colorParams);

        //List<Integer> acum = new ArrayList<>();
        
        for (var s : simbolos) {
            if (s[0].equals(nom)) {
                String[] metodo = new String[1 + sortedParams.size()];
                metodo[0] = nom;

                for (int j = 0; j < sortedParams.size(); j++) {
                    metodo[1 + j] = sortedParams.get(j);
                    
                }

                metodos.add(metodo);
                simbolos.remove(simbolos.indexOf(s));
                break;
            }
        }
        
        
        
    }
}
    
   private void meterListass(ArrayList<Production> list) {
    for (Production l : list) {
        String nom = l.lexemeRank(2);
        StringBuilder valBuilder = new StringBuilder(); // VECT0 TD1 ID2 =3 [4 val5];VECT0 TD1 id2 [3 N4 ]5
        int x = 5;
        while (!l.lexemeRank(x).equals("]")) {
            valBuilder.append(l.lexemeRank(x)).append(" ");
            x++;
        }
        String val = valBuilder.toString().trim();

        for (var s : simbolos) {
            if (s[0].equals(nom)) {
                // Separar val en diferentes columnas por comas
                String[] valores = val.split(",");
                String[] newRow = new String[2 + valores.length];
                newRow[0] = nom;
                newRow[1] = l.lexemeRank(1);
                for (int i = 0; i < valores.length; i++) {
                    newRow[2 + i] = valores[i].trim();
                }
                idList.add(newRow);
                simbolos.remove(s);
                break;
            }
        }
    }
}
    

    private void cambioColor() {
        /* Limpiar el arreglo de colores */
        textocolor.clear();
        /* Extraer rangos de colores */
        LexemaColor lexemaColor;
        try {
            File codigo = new File("color.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = areaCodigo.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF8"));
            lexemaColor = new LexemaColor(entrada);
            while (true) {
                TextColor textColor = lexemaColor.yylex();
                if (textColor == null) {
                    break;
                }
                textocolor.add(textColor);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
        Functions.colorTextPane(textocolor, areaCodigo, new Color(40, 40, 40));
    }

    private void TablaTokens() {

        tokens.forEach(token -> {
                String lexeme = token.getLexeme();
                String lexicalComp = token.getLexicalComp();
                if (lexeme.equals("FREC") || lexeme.equals("ENT") || lexeme.equals("COLOR") ||
                        lexeme.equals("DEC") || lexeme.equals("BOOL") || lexeme.equals("CAD")) {
                        lexicalComp = "TipoDato";
                    }
                if (lexeme.equals("SI") || lexeme.equals("SINO") || lexeme.equals("MIENTRAS") ||
                        lexeme.equals("REPETIR") || lexeme.equals("RETORNA") || lexeme.equals("CLASE") ||
                        lexeme.equals("DEF") || lexeme.equals("CONSOL") || lexeme.equals("ESCRIB") ||
                        lexeme.equals("APAGAR") || lexeme.equals("LCD") || lexeme.equals("PRENDER") ||
                        lexeme.equals("IMPR") || lexeme.equals("ATRAS") || lexeme.equals("IZQUIERDA") ||
                        lexeme.equals("DERECHA") || lexeme.equals("ALARMA") || lexeme.equals("REVISAR") ||
                        lexeme.equals("ALARMA") || lexeme.equals("ADELANTE") || lexeme.equals("CAJA") ||
                        lexeme.equals("BAJAR") || lexeme.equals("SUBIR") || lexeme.equals("SOLTAR") ||
                        lexeme.equals("PARAR") || lexeme.equals("LIMPIAR") || lexeme.equals("AGREGAR") ||
                        lexeme.equals("CANTIDAD") || lexeme.equals("TOMAR") || lexeme.equals("SACAR")) {
                        lexicalComp = "PalabraReservada";
                    }
                
                 if (lexeme.equals("+") || lexeme.equals("-") || lexeme.equals("/") ||
                        lexeme.equals("*") || lexeme.equals("%") || lexeme.equals("+=") ||
                        lexeme.equals("-=") || lexeme.equals("^")) {
                            lexicalComp = "Op_Aritmetico";
                         }
                if (lexeme.equals("(") || lexeme.equals(")") || lexeme.equals("[") ||
                    lexeme.equals("]") || lexeme.equals("{") || lexeme.equals("}") ||lexeme.equals(";"))  {
                    lexicalComp = "Op_Agrup";
                }
                
                if (lexeme.equals("=") )  {
                    lexicalComp = "Op_Asignacion";
                }
                
                if (lexeme.equals("==") || lexeme.equals("!=") || lexeme.equals("<") ||
                    lexeme.equals(">") || lexeme.equals("<=") || lexeme.equals(">=")) {
                    lexicalComp = "Op_Relacional";
                }

                if (lexeme.equals("&&") || lexeme.equals("||") || lexeme.equals("!")) {
                lexicalComp = "Op_Logico";
                }

                String lineColumn = "[" + token.getLine() + ", " + token.getColumn() + "]";
                lisTokens.add(new String[]{lexeme, lexicalComp, lineColumn});
        });
    }

    private void imprimirConsola() {
        int sizeErrors = errores.size();
        if (sizeErrors > 0) {
            Functions.sortErrorsByLineAndColumn(errores);
            String strErrores = "\n";
            for (ErrorLSSL error : errores) {
                String strError = String.valueOf(error);
                strErrores += strError + "\n";
            }
            //consola.setForeground(Color.red);
            appendToPane(consola, "Compilación terminada.\n", Color.black);
            appendToPane(consola, strErrores, Color.red);
            appendToPane(consola, "\nCompilación con errores...", Color.black);
        } else {
            consola.setText("Compilación terminada, no existen errores.");
        }
        consola.setCaretPosition(0);
    }

    private void limpiarAreaCodigo() {
       // Functions.clearDataInTable(tablaSimbolos);
        consola.setText("");
        tokens.clear();
        errores.clear();
        idList.clear();
        simbolos.clear();
        metodos.clear();
         lisTokens.clear();
        estadoCompilacion = false;
    }

    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(new FlatIntelliJLaf());
                FlatDarkLaf.setup();
            } catch (UnsupportedLookAndFeelException ex) {
                System.out.println("LookAndFeel no soportado: " + ex);
            }
            new Compilador().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane areaCodigo;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnGuardarC;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JPanel buttonsFilePanel;
    private javax.swing.JTextPane consola;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelButtonCompilerExecute;
    // End of variables declaration//GEN-END:variables
}
